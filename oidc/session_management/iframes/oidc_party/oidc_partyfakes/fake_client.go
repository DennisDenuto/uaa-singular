// Code generated by counterfeiter. DO NOT EDIT.
package oidc_partyfakes

import (
	"sync"

	"github.com/DennisDenuto/go-uaa-singular/oidc/session_management"
	"github.com/DennisDenuto/go-uaa-singular/oidc/session_management/iframes/oidc_party"
)

type FakeClient struct {
	CheckSessionStub        func(clientId string, sessionState string) (session_management.UserAuthenticated, error)
	checkSessionMutex       sync.RWMutex
	checkSessionArgsForCall []struct {
		clientId     string
		sessionState string
	}
	checkSessionReturns struct {
		result1 session_management.UserAuthenticated
		result2 error
	}
	checkSessionReturnsOnCall map[int]struct {
		result1 session_management.UserAuthenticated
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeClient) CheckSession(clientId string, sessionState string) (session_management.UserAuthenticated, error) {
	fake.checkSessionMutex.Lock()
	ret, specificReturn := fake.checkSessionReturnsOnCall[len(fake.checkSessionArgsForCall)]
	fake.checkSessionArgsForCall = append(fake.checkSessionArgsForCall, struct {
		clientId     string
		sessionState string
	}{clientId, sessionState})
	fake.recordInvocation("CheckSession", []interface{}{clientId, sessionState})
	fake.checkSessionMutex.Unlock()
	if fake.CheckSessionStub != nil {
		return fake.CheckSessionStub(clientId, sessionState)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.checkSessionReturns.result1, fake.checkSessionReturns.result2
}

func (fake *FakeClient) CheckSessionCallCount() int {
	fake.checkSessionMutex.RLock()
	defer fake.checkSessionMutex.RUnlock()
	return len(fake.checkSessionArgsForCall)
}

func (fake *FakeClient) CheckSessionArgsForCall(i int) (string, string) {
	fake.checkSessionMutex.RLock()
	defer fake.checkSessionMutex.RUnlock()
	return fake.checkSessionArgsForCall[i].clientId, fake.checkSessionArgsForCall[i].sessionState
}

func (fake *FakeClient) CheckSessionReturns(result1 session_management.UserAuthenticated, result2 error) {
	fake.CheckSessionStub = nil
	fake.checkSessionReturns = struct {
		result1 session_management.UserAuthenticated
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) CheckSessionReturnsOnCall(i int, result1 session_management.UserAuthenticated, result2 error) {
	fake.CheckSessionStub = nil
	if fake.checkSessionReturnsOnCall == nil {
		fake.checkSessionReturnsOnCall = make(map[int]struct {
			result1 session_management.UserAuthenticated
			result2 error
		})
	}
	fake.checkSessionReturnsOnCall[i] = struct {
		result1 session_management.UserAuthenticated
		result2 error
	}{result1, result2}
}

func (fake *FakeClient) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkSessionMutex.RLock()
	defer fake.checkSessionMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeClient) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ oidc_party.Client = new(FakeClient)
